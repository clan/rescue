#!/bin/sh

BOLD="\033[1m"
GOOD="\033[32;1m"
BAD="\033[31;1m"
WARN="\033[33;1m"
NORMAL="\033[0m"

INIT_OPTS=""
NEW_ROOT="/newroot"
REAL_INIT="/sbin/init"
CONSOLE="/dev/console"

SCANDELAY='1'

udevd_bin="/sbin/udevd"

good_msg()
{
    msg=$1
    msg="${msg:-...}"

    echo -e "${GOOD}>>${NORMAL} ${msg} ${NORMAL}"
}

bad_msg()
{
    msg=$1
    msg="${msg:-...}"

    echo -e "${BAD}!!${NORMAL} ${msg} ${NORMAL}"
}

runshell()
{
    if [ -n "$1" ] && [ -x "$1" ] ; then
        exec "$1"
    else
        exec /bin/sh
    fi

    exit 1
}

panic()
{
    bad_msg "$@"
    bad_msg "Running a mini shell (cannot complete the boot process)"
    sleep 2
    runshell
}

udev_start()
{
    good_msg "Activating udev ..."

    [ -e /etc/udev/udev.conf ] && source /etc/udev/udev.conf

    tmpfs_size="10M"
    mount -t devtmpfs -o size=$tmpfs_size,mode=0755 udev /dev

    [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
    [ -e /dev/null ] || mknod /dev/null c 1 3

    # process module dependencies
    /sbin/depmod -a

    # run udevd and let it process uevents
    echo > /sys/kernel/uevent_helper
    mkdir -p /dev/.udev/db/
    ${udevd_bin} --daemon --resolve-names=never
    mkdir -p /dev/.udev/queue/ /dev/.udev/rules.d/
    udevadm trigger
    udevadm settle || true

    # if the scandelay parameter has been set, we wait a bit for devices
    sleep 3 # sleep 3 seconds anyway: most USB devices just need it to initialize
    [ -n "${SCANDELAY}" ] && good_msg "Waiting ${SCANDELAY} seconds ..." && sleep ${SCANDELAY}
}

udev_stop()
{
    good_msg "Try stop udev ..."
    # Stop udevd, we'll miss a few events while we run init, but we catch up
    for proc in /proc/[0-9]* ; do
        [ -x $proc/exe ] || continue
        [ "$(readlink $proc/exe)" != ${udevd_bin} ] || kill ${proc#/proc/}
    done
}

move_mounts_to_chroot()
{
    [ -d ${NEW_ROOT} ] || mkdir -p ${NEW_ROOT}

    for fs in /run /dev /sys /proc; do
        if grep -qs "$fs" /proc/mounts; then
            local chroot_dir="${NEW_ROOT}${fs}"
            [ -d "${chroot_dir}" ] || mkdir -p "${chroot_dir}"
            if ! mount --move $fs "${chroot_dir}" ; then
                umount $fs || bad_msg "Failed to move and umount $fs!"
            fi
        fi
    done
}

find_and_mount()
{
    local loopfile=$1

    local mountdir="/mnt/boot"
    [ -d ${mountdir} ] || mkdir -p ${mountdir}

    [ -d ${NEW_ROOT} ] || mkdir -p ${NEW_ROOT}

    devtype="$1"

    good_msg "Searching for ${loopfile} on block devices..."
    local filefound=''
    while [ 1 ] ; do
        for d in $(find /sys/class/block/ -type l); do
            d=/dev/${d##*/}
            good_msg "check ${d}"
            [ -b ${d} ] || continue
            devsize=$(blockdev --getsize64 ${d}) 2>/dev/null || devsize=0
            [ ${devsize} -gt $((512 * 1024 * 1024)) ] || continue
            fstype=$(blkid ${d} | sed -n 's/.*TYPE=\"\([^\"]*\)\".*/\1/p')
            [ -z "${fstype}" ] && continue
            if mount -r -t ${fstype} ${d} ${mountdir} > /dev/null 2>&1 ; then
                if [ -s ${mountdir}/${loopfile} ] ; then
		    md5now=$(md5sum ${mountdir}/${loopfile} | cut -d ' ' -f1)
		    md5exp=$(cat ${mountdir}/${loopfile}.md5sum | cut -d ' ' -f1)
                    if [ "${md5now}" = "${md5exp}" ] ; then
                        filefound=${mountdir}/${loopfile}
			break
                    else
                        bad_msg "found file ${loopfile}, but md5 chksum is invalid"
                    fi
                fi
                if [ -z "${filefound}" ] ; then
                    umount ${d}
                fi
            fi
        done
        if [ ! -z "${filefound}" ] ; then
            break
        fi
        bad_msg "Cannot find ${loopfile} on devices"
        read -a a -N 1 -t 10 -p "<<< Retry or Abort? [ra] "
        if [[ "$?" == 0 && "${a}" == "r" ]] ; then
            good_msg "Will try again"
            continue
        else
	    echo
            break
        fi
    done

    if [ ! -z "${filefound}" ] ; then
        if [ ! -z "${DOCACHE}" ] ; then
	    good_msg "Try caching files ${filefount}"
	fi
        mount -t squashfs ${filefound} ${NEW_ROOT}
	return 0
    fi

    return 1
}

# Clean input/output
exec >${CONSOLE} <${CONSOLE} 2>&1

if [ "$$" != "1" ]; then
    echo "$0 has to be run as the init process as the one"
    echo "with a PID of 1. Try adding init=$0 to the"
    echo "kernel command line or running \"exec $0\"."
    exit 1
fi

# setup busybox
/bin/busybox --install -s

if [ "$0" = "/init" ]; then
    rm -f /linuxrc
fi

# create system directories
[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
for d in /sys /proc /tmp /var/lock ; do
    [ -d ${d} ] || mkdir -p ${d}
done

# mount virtual filesystems
mount -t proc -o noexec,nosuid,nodev proc /proc
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys

CONSOLEFONT="/usr/share/consolefonts/tvcn8x16.psf.gz"
[ -s ${CONSOLEFONT} ] && setfont ${CONSOLEFONT}

for x in $(cat /proc/cmdline); do
    case "${x}" in
        docache)
            DOCACHE=1
        ;;
        gentoo)
            RUN_GENTOO=1
        ;;
        minishell)
            RUN_MINISHELL=1
        ;;
        real_root=*)
            REAL_ROOT=${x#*=}
        ;;
        root=*)
            FAKE_ROOT=${x#*=}
        ;;
    esac
done

udev_start

if [ ! -z "${RUN_MINISHELL}" ] ; then
    good_msg "Running a mini shell (as requested by the command line)"
    runshell
fi

if [ ! -z "${RUN_GENTOO}" ] ; then
    find_and_mount rescue.dat.xz

    if [ $? -eq 0 ] ; then
        udev_stop
        move_mounts_to_chroot

	good_msg "Now siwtch to gentoo system..."
	exec switch_root -c /dev/console ${NEW_ROOT} /sbin/init
    else
        exec /bin/sh
    fi
fi

exec ${REAL_INIT} < dev/console > dev/console

panic "A fatal error has occured since ${REAL_INIT} did not boot correctly."
